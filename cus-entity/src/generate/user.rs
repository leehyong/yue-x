//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone,
    Debug,
    PartialEq,
    DeriveEntityModel,
    Eq,
    Serialize,
    Deserialize,
    :: cus_marco :: DeriveMaybeLeftRightTreeModel,
)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub parent_id: i64,
    #[sea_orm(unique)]
    pub name: String,
    #[sea_orm(unique)]
    pub email: Option<String>,
    #[sea_orm(unique)]
    pub phone: Option<String>,
    pub password: String,
    pub nickname: String,
    pub avatar: String,
    pub language: String,
    pub status_dc_id: i64,
    pub created_at: i64,
    pub updated_at: i64,
    pub deleted_at: Option<i64>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::cus_data_dict::Entity",
        from = "Column::StatusDcId",
        to = "super::cus_data_dict::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    CusDataDict,
    #[sea_orm(has_many = "super::foreign_user::Entity")]
    ForeignUser,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::ParentId",
        to = "Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    SelfRef,
    #[sea_orm(has_many = "super::user_organization::Entity")]
    UserOrganization,
}

impl Related<super::cus_data_dict::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CusDataDict.def()
    }
}

impl Related<super::foreign_user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ForeignUser.def()
    }
}

impl Related<super::user_organization::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserOrganization.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
