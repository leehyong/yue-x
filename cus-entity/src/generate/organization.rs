//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone,
    Debug,
    PartialEq,
    DeriveEntityModel,
    Eq,
    Serialize,
    Deserialize,
    :: cus_marco :: DeriveMaybeLeftRightTreeModel,
)]
#[sea_orm(table_name = "organization")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub name: String,
    pub address: String,
    pub remark: String,
    pub tag: i64,
    pub left: i64,
    pub right: i64,
    pub level: i64,
    pub creator: i64,
    pub editor: i64,
    pub created_at: i64,
    pub updated_at: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::cus_data_dict::Entity")]
    CusDataDict,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::Creator",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    User2,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::Editor",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    User1,
    #[sea_orm(has_many = "super::user_organization::Entity")]
    UserOrganization,
    #[sea_orm(has_many = "super::work_header::Entity")]
    WorkHeader,
}

impl Related<super::cus_data_dict::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CusDataDict.def()
    }
}

impl Related<super::user_organization::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserOrganization.def()
    }
}

impl Related<super::work_header::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WorkHeader.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
