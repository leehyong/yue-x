//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone,
    Debug,
    PartialEq,
    DeriveEntityModel,
    Eq,
    Serialize,
    Deserialize,
    :: cus_marco :: DeriveMaybeLeftRightTreeModel,
)]
#[sea_orm(table_name = "work_task")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub name: String,
    pub code: String,
    pub content: String,
    pub principal_user_id: i64,
    pub submit_cycle_dc_id: i64,
    pub plan_start_dt: Option<i64>,
    pub plan_end_dt: Option<i64>,
    pub actual_plan_start_dt: Option<i64>,
    pub actual_plan_end_dt: Option<i64>,
    pub tag: i64,
    pub left: i64,
    pub right: i64,
    pub organization_id: i64,
    pub task_status_dc_id: i64,
    pub level: i64,
    pub creator: i64,
    pub editor: i64,
    pub created_at: i64,
    pub updated_at: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::cus_data_dict::Entity",
        from = "Column::SubmitCycleDcId",
        to = "super::cus_data_dict::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    CusDataDict2,
    #[sea_orm(
        belongs_to = "super::cus_data_dict::Entity",
        from = "Column::TaskStatusDcId",
        to = "super::cus_data_dict::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    CusDataDict1,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::Creator",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    User3,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::Editor",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    User2,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::PrincipalUserId",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    User1,
}

impl ActiveModelBehavior for ActiveModel {}
