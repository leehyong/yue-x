//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone,
    Debug,
    PartialEq,
    DeriveEntityModel,
    Eq,
    Serialize,
    Deserialize,
    :: cus_marco :: DeriveMaybeLeftRightTreeModel,
)]
#[sea_orm(table_name = "work_content")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    #[sea_orm(column_type = "Text")]
    pub content: String,
    pub submit_dt: String,
    #[sea_orm(column_type = "Text")]
    pub attachments: String,
    pub task_id: i64,
    pub main_task_id: i64,
    pub header_id: i64,
    pub creator: i64,
    pub editor: i64,
    pub created_at: i64,
    pub updated_at: i64,
    pub deleted_at: Option<i64>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::Creator",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    User2,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::Editor",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    User1,
    #[sea_orm(
        belongs_to = "super::work_header::Entity",
        from = "Column::HeaderId",
        to = "super::work_header::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    WorkHeader,
    #[sea_orm(
        belongs_to = "super::work_task::Entity",
        from = "Column::MainTaskId",
        to = "super::work_task::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    WorkTask2,
    #[sea_orm(
        belongs_to = "super::work_task::Entity",
        from = "Column::TaskId",
        to = "super::work_task::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    WorkTask1,
}

impl Related<super::work_header::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WorkHeader.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
